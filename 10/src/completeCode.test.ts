import completeCode from './completeCode';

describe('completeCode()', () => {
  it.each([
    ['[({(<(())[]>[[{[]{<()<>>', ['[({(<(())[]>[[{[]{<()<>>', '}}]])})]']],
    ['[(()[<>])]({[<{<<[]>>(', ['[(()[<>])]({[<{<<[]>>(', ')}>]})']],
    ['(((({<>}<{<{<>}{[]{[]{}', ['(((({<>}<{<{<>}{[]{[]{}', '}}>}>))))']],
    ['{<[[]]>}<{[{[{[]{()[[[]', ['{<[[]]>}<{[{[{[]{()[[[]', ']]}}]}]}>']],
    ['<{([{{}}[<[[[<>{}]]]>[]]]', ['<{([{{}}[<[[[<>{}]]]>[]]]', ')}>']],
  ])('should return the completed code string', (input, expected) => {
    expect(completeCode(input)).toEqual(expected);
  });

  it.each([
    ['{([(<{}[<>[]}>{[]{[(<()>', '}'],
    ['[[<[([]))<([[{}[[()]]]', ')'],
    ['[{[{({}]{}}([{[{{{}}([]', ']'],
    ['[<(<(<(<{}))><([]([]()', ')'],
    ['<{([([[(<>()){}]>(<<{{', '>'],
  ])('should handle corrupt code', (input, expected) => {
    expect(() => completeCode(input)).toThrow(expected);
  });
});
